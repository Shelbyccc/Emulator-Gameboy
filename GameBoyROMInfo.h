#pragma once

#include "GameBoyDefs.h"

namespace GameBoy
{

/*
0100h - 0103h. Точка входа в программу картриджа. Исполнение записанной в ПЗУ программы начинается с адреса 0100h. По этим адресам помещается команда NOP и команда перехода на начало программы JP. 
Этот фрагмент выглядит следующим образом:

0100 00 NOP 
0101 СЗ хх XX JP xxxxh 
; хххх - адрес запуска.

0104h - 0133h. Здесь хранится изображение торгового знака фирмы NINTENDO, показываемое на экране в начале игры. Изменение хотя бы одного байта в этой области памяти приведет к неработоспособности картриджа. 
Ниже приведено содержимое данной области:

0104 СЕ ED 66 66 СС 0D 00 0В 
010С 03 73 00 83 00 ОС 00 0D 
0114 00 08 11 1F 88 89 00 0Е 
011С DC СС 6Е Е6 DD DD D9 99 
0124 ВВ ВВ 67 63 6Е 0Е ЕС СС 
012С DD DC 99 9F ВВ В9 33 3Е

0134h - 0142h. Название игры, записанное заглавными английскими буквами в кодировке ASCII. Свободные ячейки заполняются кодом 00h. 
014 3h. Если здесь содержится код 80h, программа предназначена для игровой системы COLOR GAME BOY. 
0144h, 0145h. Лицензионный код. Если содержимое ячейки с адресом 014Bh не равно 33h, то по этим адресам записаны нули. 
0146h. Тип системы: 00h для GAME BOY, 03h для SUPER GAME BOY. Если здесь записан код 00h, дополнительные функции игровой системы SUPER GAME BOY не используются. 
0147h. Информация о структуре картриджа. Возможны следующие значения: 00 - имеется только ПЗУ; 01h - имеется ПЗУ и контроллер МВС1; 02h - имеется ПЗУ, контроллер МВС1 и ОЗУ;
03h - имеется ПЗУ, контроллер MBC1 ОЗУ и батарея; 
05h - имеется ПЗУ и контроллер МВС2; 
0 6h - имеется ПЗУ, контроллер МВС2 и батарея; 08h - имеется ПЗУ и ОЗУ; 
09h - имеется ПЗУ, ОЗУ и батарея; 0Bh - имеется ПЗУ и контроллер МММ01; 0Сh - имеется ПЗУ, контроллер МММ01 и ОЗУ; 
0Dh - имеется ПЗУ, контроллер МММ01, ОЗУ и батарея; 
0Fh - имеется ПЗУ, контроллер МВСЗ, таймер) и батарея; 
10h - имеется ПЗУ, контроллер МВСЗ, ОЗУ, таймер и батарея; 
1 lh - имеется ПЗУ и контроллер МВСЗ; 
12h - имеется ПЗУ, контроллер МВСЗ и ОЗУ; 
13h - имеется ПЗУ, контроллер МВСЗ, ОЗУ и батарея; 
19h - имеется ПЗУ и контроллер МВС5; 
1Ah - имеется ПЗУ, контроллер МВС5 и ОЗУ; 
1Bh - имеется ПЗУ, контроллер МВС5, ОЗУ; и батарея; 
1Ch - имеется ПЗУ, контроллер МВС5 и карта RUMBLE; 
1Dh - имеется ПЗУ, контроллер МВС5, карта RUMBLE и ОЗУ; 
1Eh - имеется ПЗУ, контроллер МВС5, карта RUMBLE, ОЗУ и батарея; 
1Fh - камера для GAME BOY; 
FDh - картридж BANDAI ТАМА5 (тамагочи); 
FEh - контроллер HUDSON HUC3; 
FFh - контроллер HUDSON HUC1.

0148h. Информация об объеме установленного в картридже ПЗУ: 
00h - 32 Кб (2 банка); 
01h - 64 Кб (4 банка); 
02h - 128 Кб (8 банков); 
03h - 256 Кб (16 банков); 
04h - 512 Кб (32 банка); 
05h- 1 Мб (64 банка); 
06h- 2 Мб (128 банков); 
52h - 1,1 Мб (72 банка); 
53h - 1,2 Мб (80 банков); 
54h - 1,5 Мб (96 банков).

0149h. Информация об объеме установленного в картридже ОЗУ: 
00h - ОЗУ не установлено; 
01h - 2 Кб (1 банк); 
02h - 8 Кб (1 банк); 
03h - 32 Кб (4 банка); 
04h - 128 Кб (16 банков).

014Ah. Код страны распространения картриджа: 
00h - Япония; 
01h - другие страны.

014Bh. Лицензионный код производителя. Для использования дополнительных функций системы SUPER GAME BOY в этом разряде должен быть записан код 33h. 
33h - лицензионный код указан в байтах с адресами 0144h, 0145h. 
79h - Accolade; 
A4h - Konami.

014Ch. Код микросхемы ПЗУ. Обычно в этом байте записано значение 00h. 
014Dh. Дополнительный код блока данных. Программа, расположенная во встроенном ПЗУ системы, вычисляет сумму блока данных, которые находятся в ПЗУ картриджа по адресам 0134h - 014Dh.
Затем к результату прибавляется 25. Выполнение программы, записанной в картридже, начинается только в том случае, если младший байт полученной суммы равен 0. 
014Eh, 014Fh. Контрольная сумма содержимого картриджа, которая вычисляется путем последовательного сложения всех байтов, записанных в ПЗУ картриджа (кроме байтов с контрольной суммой).
Система GAME BOY игнорирует это значение. Для корректной работы системы SUPER GAME BOY здесь должна храниться правильная контрольная сумма. 
*/
	struct ROMInfo
	{
	public:
		enum CartridgeTypesEnum
		{
			CART_ROM_ONLY = 0x00,
			CART_ROM_MBC1 = 0x01,
			CART_ROM_MBC1_RAM = 0x02,
			CART_ROM_MBC1_RAM_BATT = 0x03,
			CART_ROM_MBC2 = 0x05,
			CART_ROM_MBC2_BATT = 0x06,
			CART_ROM_RAM = 0x08,
			CART_ROM_RAM_BATT = 0x09,
			CART_ROM_MMM01 = 0x0B,
			CART_ROM_MMM01_SRAM = 0x0C,
			CART_ROM_MMM01_SRAM_BATT = 0x0D,
			CART_ROM_MBC3_TIMER_BATT = 0x0F,
			CART_ROM_MBC3_TIMER_RAM_BATT = 0x10,
			CART_ROM_MBC3 = 0x11,
			CART_ROM_MBC3_RAM = 0x12,
			CART_ROM_MBC3_RAM_BATT = 0x13,
			CART_ROM_MBC5 = 0x19,
			CART_ROM_MBC5_RAM = 0x1A,
			CART_ROM_MBC5_RAM_BATT = 0x1B,
			CART_ROM_MBC5_RUMBLE = 0x1C,
			CART_ROM_MBC5_RUMBLE_SRAM = 0x1D,
			CART_ROM_MBC5_RUMBLE_SRAM_BATT = 0x1E,
			CART_POCKET_CAMERA = 0x1F,
			CART_BANDAI_TAMA5 = 0xFD,
			CART_HUDSON_HUC3 = 0xFE,
			CART_HUDSON_HUC1 = 0xFF,
			CART_UNKNOWN = 0x100
		};

		enum MMCTypesEnum
		{
			MMC_ROMONLY = 0x00,
			MMC_MBC1 = 0x01,
			MMC_MBC2 = 0x02,
			MMC_MBC3 = 0x03,
			MMC_MBC5 = 0x04,
			MMC_MMM01 = 0x05,
			MMC_UNKNOWN = 0x06
		};

		enum ROMSizesEnum
		{
			ROMSIZE_2BANK = 0x0,
			ROMSIZE_4BANK = 0x1,
			ROMSIZE_8BANK = 0x2,
			ROMSIZE_16BANK = 0x3,
			ROMSIZE_32BANK = 0x4,
			ROMSIZE_64BANK = 0x5,
			ROMSIZE_128BANK = 0x6,
			ROMSIZE_72BANK = 0x52,
			ROMSIZE_80BANK = 0x53,
			ROMSIZE_96BANK = 0x54
		};

		enum RAMSizesEnum
		{
			RAMSIZE_NONE = 0x0,
			RAMSIZE_HALFBANK = 0x1,
			RAMSIZE_1BANK = 0x2,
			RAMSIZE_4BANK = 0x3,
			RAMSIZE_16BANK = 0x4
		};

		wchar_t ROMFile[255];				//название файла
		char gameTitle[17];					//заголовок			
		CartridgeTypesEnum cartType;		//тип картриджа
		MMCTypesEnum MMCType;				//тип контроллера банков
		int ROMSize;						//размер ПЗУ
		int RAMSize;						//размер ОЗУ

		ROMInfo();
		void ReadROMInfo(const BYTE* ROMBytes);

		const char* CartTypeToString(CartridgeTypesEnum type) const { return CartridgeTypes[type]; }

	private:
		const char* CartridgeTypes[0x101];	//Cartridge type # -> Cartridge type string table
		int ROMSizes[0xFF];					//ROM size # -> ROM size value table
		int RAMSizes[0xFF];					//RAM size # -> RAM size value table
	};

}